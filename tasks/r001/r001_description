r001 is the `ruby task'.  In order to record practice on this task, you 
will need to commit messages whose first line is:
    RPT: r001 time
where time is replaced by a numeric value less than or equal to 30 and
corresponding to the amount of practice time (in minutes) you spent 
since the last such commit on the task i001.  The body of the message will 
tell how far you have gotten with the task so far and what problems, 
if any, you are having completing the task.  Note that these commits 
are not direct communications with the prof, but instead notes in your
practice report which probably won't be read until the practice report is 
marked.

Unlike the install task which were specific to the first weekly practice, 
this task can be worked on during any practice time.  Tasks like this
do not have to be done in order.  Nor do you have to complete one task 
before starting another.  As part of the quality marking of the task
reports, there will be certain programs and/or techniques that you will
be expected to have put in some time with, but not specific tasks that
you will have been expected to have completed.  As with all tasks (not
quizzes) in this class, you are allowed to ask for help when you are 
stuck.  As a rule of thumb, if you haven't made any progress after a
half hour, it is time to ask for help/clarification.  As long as you
have ideas to try out, it is worthwhile practice to try them out and
see how they work.

As usual, you are expected to make notes as you practice and not to wait 
til the end and then produce notes from memory.  In line with this view of 
proper practice behavior, if the local clock time on the practice time note
shows less time has passed between two notes than the time on the second
note indicates, the excess time will be ignored and it will be marked as
poor recording practice.

In the r001 directory, I have placed a copy of count_down, having 
renamed it count_down.rb .  This task involves working with this
program.

STEP ONE is to create a Minitest test for the code in count_down.rb 
that checks to see if it takes 120 seconds to run.  Some useful references
are:
   https://semaphoreci.com/community/tutorials/getting-started-with-minitest
   https://docs.ruby-lang.org/en/2.1.0/MiniTest/Assertions.html
   https://stackoverflow.com/questions/11406410/measure-time-in-ruby
In order to test the code, we will need to move it from being just statements
in the file to being inside a method definition.  Also, since we are no longer
invoking it from the command line, we want to move the reference to 
ARGV to be a reference to an incoming parameter to the method.

STEP TWO is make sure the code for count_down.rb has been well written.
We can check that with a tool called reek.  The main source for information
about reek is 
    https://github.com/troessner/reek

When I ran reek over my version of doing the above, there were three
complaints: 2 calls to Time.now, my method that held the original
count_down code was too long, and I didn't have a descriptive comment
for my testing class.  The last two were reasonable and I fixed them.
The first, about calling Time.now twice wasn't wrong as each invokation
was getting something different.  So this last one I deactivated by
changing the number of allowed calls to be 2 in the method where I
was checking time twice using the techniques in
    https://github.com/troessner/reek/blob/master/docs/Smell-Suppression.md

STEP THREE is to address the I/O problem.  We have a print method invoked in
count_down which raises two problems.  The first problem is that it clutters
the output of the test run (imagine if we ran 1000 tests on this) and 
slows down the test.  The second problem is that the test methods can't
see what is being printed and so can check to make sure the right thing
is printed at the right time.  To start to address this, we change the
test so that instead of count_down(120), it does CountDown.new.count_down(120).
This should fail because we haven't created CountDown yet.  So we should
do so.  The following tutorial note may help
   http://ruby-for-beginners.rubymonstas.org/writing_classes/initializers.html

Make sure the test works and that reek is happy with the new version.

STEP FOUR is to change the test to do
     CountDown.new(PrintMethod.new).count_down(120)
This should fail and need you to create a class PrintMethod that contains a
method print that prints and you to set up an initializer for CountDown that
takes such an object and records it in a field of the new instance where it
can then be invoked by count_down (another change).

Make sure the test works and that reek is happy with the new version.

This sort of refactoring is frequently useful in testing and goes by the
name Dependency Injection
    https://en.wikipedia.org/wiki/Dependency_injection

STEP FIVE is to change the test so it now does    
     CountDown.new(QuietPrintMethod.new).count_down(120)
This should fail, requiring the creation of QuietPrintMethod which also 
supports print, but does no I/O.

Make sure the test works and that reek is happy with the new version.

STEP SIX is to remove the invokations to time in the tester and instead
do
     fake = QuietPrintMethod.new
     CountDown.new(fake).count_down(120)
     duration = fake.timeInterval
This should fail because we haven't yet implemented timeInterval for
QuietPrintMethod .  What I want print to do is to record enough
information so that when it is invoked multiple times in the same
instance, the method timeInterval will be able to tell me how
must time passed from the first invocation of print to the last one.

Make sure the test works and that reek is happy with the new version.

Note that we should now be able to remove the suppression of the
code smell associated with multiple Time.now invocations in the
test method and there should be none there now -- it should have
moved to the QuietPrintMethod object where it is now only invoked
once (textually)

STEP SEVEN is fixing things so we can both test and use count_down.  Currently
when we run count_down, we are only running automated test cases.  But some
times people might actually want to use the program.  We can remove the testing
stuff, but we might break something when we did it and we might need it back
at some later point when a new feature was added.  The solution is to create
a structure of three files.  One file is the code that is shared beween the
user's view and the tester's view of this program.  Another file for the code
specific to the user's view (such as the class that supports actual printing).
And another file contains the code specific to the tester's view.  The 
remaining problem is to figure out how to let the user and tester view code
access the common view.  Useful stackoverflows on this are:
   https://stackoverflow.com/questions/3672586/what-is-the-difference-between-require-relative-and-require-in-ruby
   https://stackoverflow.com/questions/16856243/how-to-require-a-ruby-file-from-another-directory
   https://stackoverflow.com/questions/318144/what-is-the-difference-between-include-and-require-in-ruby
When checking to make sure that you did this reorganization correctly, you want
to both run the program as a user and run it as a tester.  More generally,
it is important that a programmer uses the program they are developing as
some problems get hidden by the testing infrastructure and only show up in
`production' mode https://en.wikipedia.org/wiki/Eating_your_own_dog_food .

Make sure reek is happy with all three files.

STEP EIGHT is to write a test to check if the first line printed by the
program is correct and to get it to pass.  That is:
     fake = QuietPrintMethod.new
     CountDown.new(fake).count_down(120)
     message = fake.log(1)
     assert_equals message, "120 seconds left"
Now we have to start working on QuietPrintMethod to make our test pass.
Basically what we want is for print to store a log of the messages printed in
an array in the object and then log to let us retrieve a message from the array.

Make sure the test works and that reek is happy with the new version.

STEP NINE is to write a test to check if pair of consecutive message is 
separated by roughly 1 second and get it to pass.
     fake = QuietPrintMethod.new
     CountDown.new(fake).count_down(120)
     current_time = fake.time_log(1)
     number_of_messages = fake.number_of_messages
     if number_of_messages > 1 
         (number_of_messages - 1).downto(1) { | next_message |
             next_time = fake.time_log(next_message)
             # put your comparison assert here
             current_time = next_time
         }
     end

Make sure the test works and that reek is happy with the new version.

STEP TEN is to consider something we haven't worried about yet, i.e.,
what happens if there is an infinite loop on print.  Figure out how to
write a test specifically to see what happens when
     QuietPrintMethod.new(10)
is used to print 9 messages, 10 messages, and 11 messages.  Make sure that
9 and 10 work ok but that 11 causes a quit out of the QuietPrintMethod 
instance that is caught in the tester (i.e., we won't view the loop as an
error, but we will simply stop the loop).  To get this to work, you want to
look at how exception handling works in Ruby, cf.
   http://blog.honeybadger.io/a-beginner-s-guide-to-exceptions-in-ruby/
   https://stackoverflow.com/questions/51021/what-is-the-difference-between-raising-exceptions-vs-throwing-exceptions-in-ruby
   https://stackoverflow.com/questions/3716801/what-is-catch-and-throw-used-for-in-ruby/

Make sure the test works and that reek is happy with the new version.

STEP ELEVEN is to consider the notion that one beep is not enough.  Set up a
test that invokes the shared code with a parameter for how many beeps 
(each separated by a second) the code should perform.  It should check to 
see that that number of beeps was actually performed using our log access 
methods to QuietPrintMethod that were implemented earlier.  Then the
shared code needs to be modified so that it will print that number of beeps.
You should also check out the user view by having it do 1000 beeps (hmmm, 1000
seconds is nearly 17 minutes -- so let it beep for a while and then use 
control-C to kill it).

Make sure the test works and that reek is happy with the new version.

STEP TWELVE: Remember the test that uses time_interval ?  Well it is 
probably having troubles with multiple copies of two kinds of print
messages.  That time_interval is only about the waiting messages and
the first beep is application specific knowledge that shouldn't be in
the QuietPrintMethod class, but in some other class that the tester uses
to analyze the log from the QuietPrintMethod class.

Make sure the test works and that reek is happy with the new version.

MORE STEPS TO COME
